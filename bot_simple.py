# -*- coding: utf-8 -*-
"""Copy of basic_algo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BVyZgun3CKdkBvqs_5B-5dHTvmByAtg8
"""

from messages import Price, Trade
from TradeManager import TradeManager
from utils import read_json, write_json
# import json
import numpy as np
import socket, json, time

WINDOW = 20

ESX_list = []
SP_list = []

d = dict()
d["feedcode"] = ""
d["price"] = 0
d["volume"] = 0

def buyOrSell(d,prev_60_val, newval):
  parameters = {}

  params = read_json("recordings/sliders_simple.json")

  mean = np.mean(prev_60_val)
  # calculate mean based on queue
  std = np.std(prev_60_val)
  # calculated std
  z = (newval - mean)/ std
  # print(z)
  # calculate z-score
  # if z > 2 == negative value (sell)
  parameters["mean"] = round(mean,0)
  parameters["stdev"] = round(std,2)
  parameters["z-value"] = round(z,2)
  
  if z > params["threshold_sell"]:
    d["price"] = newval
    d["volume"] = int(params["vol_sell"])
    parameters["trade_volume"] = d["volume"]
    return d, parameters

  elif z < params["threshold_buy"]:
    d["price"] = newval
    d["volume"] = int(params["vol_buy"])
    parameters["trade_volume"] = d["volume"]
    return d, parameters
  
  else:
    # return 0 price, 0 volume
    d["volume"] = 0
    parameters["trade_volume"] = d["volume"]
    return d, parameters

mngr = TradeManager("30_bot_simple")

old_ts_esx = None
old_ts_sp = None

status = {"parameters" : {}, "position" : {}, "flowchart" : "empty.png"}
while(True):
  json_dict = read_json("recordings/prices.json") #read the json file

  if json_dict["ESX"]["timestamp"] != old_ts_esx: # if the timestamp is different than the old timestamp we have a new packet
    d["feedcode"] = "ESX" #so we set the fee
    ESX_list.append(json_dict["ESX"]["bid"]["price"])
    if len(ESX_list)>WINDOW:
      ESX_list.pop(0) # keep only the WINDOW last values

      # call buyOrSell      
      d, intermediaries = buyOrSell(d,ESX_list,json_dict["ESX"]["bid"]["price"])
      status["parameters"]["ESX"] = intermediaries
      
    old_ts_esx = json_dict["ESX"]["timestamp"]

    if d["volume"] != 0:
      json_dict = read_json("recordings/prices.json")

    if d["volume"] > 0:
      d["price"] = json_dict[d["feedcode"]]["ask"]["price"]
      action = "BUY"
    elif d["volume"] < 0 :
      d["price"] = json_dict[d["feedcode"]]["bid"]["price"]
      action= "SELL"
    
    if d["volume"] != 0:
      result = mngr.make_trade(d["feedcode"]+"-FUTURE", action, d["price"], np.abs(d["volume"]))
      print(d, result)

  if json_dict["SP"]["timestamp"] != old_ts_sp:
    d["feedcode"] = "SP"
    SP_list.append(json_dict["SP"]["bid"]["price"])
    status["flowchart"] = "append.png"

    if len(SP_list)>WINDOW:
      SP_list.pop(0) # keep only the WINDOW last values

      # call buyOrSell      
      d, intermediaries = buyOrSell(d,SP_list,json_dict["SP"]["bid"]["price"])
      status["parameters"]["SP"] = intermediaries
      status["flowchart"] = "nothing.png"

    old_ts_sp = json_dict["SP"]["timestamp"]

    if d["volume"] != 0:
      json_dict = read_json("recordings/prices.json")
    # print(d["volume"])

    if d["volume"] > 0:
      status["flowchart"] = "buying.png"
      d["price"] = json_dict[d["feedcode"]]["ask"]["price"]
      action = "BUY"

    elif d["volume"] < 0 :
      status["flowchart"] = "selling.png"
      d["price"] = json_dict[d["feedcode"]]["bid"]["price"]
      action = "SELL"
      # print(action)
    
    if int(d["volume"]) != 0:
      result = mngr.make_trade(d["feedcode"]+"-FUTURE", action, d["price"], np.abs(d["volume"]))
      # print(d, result)
  # eeee
  status["position"] = read_json("recordings/position_30_bot_simple.json")
  # print(position)
  write_json(status, "recordings/status_simple.json")
time.sleep(0.05)